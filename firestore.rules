rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function hasValidUsername(username) {
      return username.matches('^[a-zA-Z0-9_]{3,30}$');
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow write: if isSignedIn() && isOwner(userId);
    }

    // Profiles collection
    match /profiles/{profileId} {
      allow read: if resource.data.visibility == 'public' || 
                   (isSignedIn() && resource.data.userId == request.auth.uid);
      allow create: if isSignedIn() && 
                     request.resource.data.userId == request.auth.uid &&
                     hasValidUsername(request.resource.data.username);
      allow update: if isSignedIn() && 
                     resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && 
                     resource.data.userId == request.auth.uid;
    }

    // Usernames collection - for uniqueness check
    match /usernames/{username} {
      allow read: if true;  // Allow checking availability
      allow create: if isSignedIn() && 
                     !exists(/databases/$(database)/documents/usernames/$(username)) &&
                     hasValidUsername(username) &&
                     request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && 
                     resource.data.userId == request.auth.uid;
    }

    // Contacts collection
    match /contacts/{contactId} {
      allow read: if isSignedIn() && 
                   resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && 
                     request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && 
                     resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && 
                     resource.data.userId == request.auth.uid;
    }
  }
}